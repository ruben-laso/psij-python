name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  ci:
    strategy:
      matrix:
        include:
          # chameleon with Docker
          # - resource: chameleon
          #   endpoint_uuid: '2d6ba83f-8609-4605-8471-51e8e7281cb5'
          #   user_endpoint_config: '{ "WORKING_DIR": "/home/cc", "WORKER_INIT": "conda activate psij"}'
          #   clone_endpoint_config: '{ "WORKING_DIR": "/home/cc"}'

          - resource: cc
            endpoint_uuid: '2d6ba83f-8609-4605-8471-51e8e7281cb5'
            user_endpoint_config: '{ "WORKING_DIR": "/home/cc", "WORKER_INIT": "conda activate psij"}'
            clone_endpoint_config: '{ "WORKING_DIR": "/home/cc"}'

          # # Anvil
          # - resource: anvil
          #   endpoint_uuid: '2033e5a7-88b0-4fe9-a0b5-b9a9c0ba82ea'
          #   user_endpoint_config: '{ "WORKING_DIR": "/anvil/scratch/x-vhayot/", "WORKER_INIT": "conda activate psij"}'
          #   clone_endpoint_config: '{ "WORKING_DIR": "/anvil/scratch/x-vhayot/"}'

    runs-on: ubuntu-latest
    environment: hpcci

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: execute tests
        id: pytest
        uses: globus-labs/correct@v1
        with:
          client_id: ${{ secrets.GLOBUS_COMPUTE_CLIENT_ID }}
          client_secret: ${{ secrets.GLOBUS_COMPUTE_CLIENT_SECRET }}
          endpoint_uuid: ${{ matrix.endpoint_uuid }}
          shell_cmd: "cd gc-action-temp/psij-python && python -m pip install -r requirements-dev.txt && PYTHONPATH=$PWD/src python -m pytest --queue-name debug --account cis230030 tests"
          user_endpoint_config: ${{ matrix.user_endpoint_config }}
          clone_endpoint_config: ${{ matrix.clone_endpoint_config }}
      - name: Archive output stdout
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-stdout-${{ matrix.endpoint_uuid }}
          path: ${{ steps.pytest.outputs.stdout }}
      - name: Archive output stderr
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-stderr-${{ matrix.endpoint_uuid }}
          path: ${{ steps.pytest.outputs.stderr }}
